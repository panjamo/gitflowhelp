# add follwing line(s) in C:\Users\<user>\.gitconfig
#
# [include]
# 	path = d:/Development/gitflowhelper/githelper/.gitconfigalias
#
# Help see: https://www.atlassian.com/blog/git/advanced-git-aliases
[alias]
	l = log --graph --oneline -n 20
	lb = log -20 --no-merges --graph --abbrev-commit --decorate --date=relative --format=format:\"%C(bold blue)%h%C(reset) - %C(dim white)%an%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold red)%d%C(reset)\"
	ln = log --graph --oneline --no-merges -n 20
	lg = log --graph --branches --oneline --all --simplify-by-decoration -n 20

	# git log with submodules
	ls = ! git log --graph --oneline -U0 --submodule -20 $1 $2 $3 $4 | grep -E '^[*| /\\]+([0-9a-f]{7} |Submodule |> |$)' && echo end git ls

	# search in git diffs, put -G Parameter after "git log" command https://stackoverflow.com/questions/1337320/how-to-grep-git-commit-diffs-or-contents-for-a-certain-word
	diffs = l -G
	
	sub = ! git submodule foreach git

	co=checkout
	ci=commit
	st = "! git branch -vv | grep -v origin | sed 's/^..//' | sed 's/ .*/ [branch not connected to remote origin]/'; git br -v | grep -E '(ahead|behind) [0-9]';  git status --short --branch"
	staged = diff --name-only --cached
	br = branch

	hide = update-index --assume-unchanged
	unhide = update-index --no-assume-unchanged
	hidechanged = ! git status --short | grep \"^ M\" | awk  '{ print $2 }' | xargs git update-index --assume-unchanged
	hidden = ! git ls-files -v | grep \"^h\"
	cohidden = ! git ls-files -v | grep \"^h\" | awk  '{ print $2 }' | xargs git co -f
	unhideall = ! git ls-files -v | grep \"^h\" | sed 's/^h //' | sed 's/.*/\"&\"/' | xargs -I{} git unhide '{}'
	hideModified = ! git ls-files --modified | xargs git hide

	stagediff = ! git diff -G"." --name-only -z | xargs -0 git add && git st
	reset0diff = ! git stagediff && git diff --name-only -z | xargs -0 git co -f && git unstage
	stdiff = ! git diff -G"." --name-only
	unstage = reset HEAD --
	resetfdx = ! git reset --hard && git clean -fdx && git st
	b = ! git for-each-ref --sort='-authordate' --format='%(authordate)%09%(objectname:short)%09%(refname)' refs/heads && ! git for-each-ref --sort='-authordate' --format='%(authordate)%09%(objectname:short)%09%(refname)' refs/remotes

	deleteAllTrackedFiles = ! git ls-tree -z -r HEAD --name-only | xargs -0 rm
	findDangelingCommits = ! git fsck --full --no-reflogs --unreachable --lost-found | xargs -n 1 git log -n 1 --pretty=oneline 2> nul

	graph = ! start /MIN 'C:\\Program Files\\TortoiseGit\\bin\\TortoiseGitProc.exe'  /command:revisiongraph

	# checkout and pull all branches
	bbehind = "! git br -v | grep -P 'behind \\d+]' | sed 's/^\\* //' | awk '{ print $1 }'"
	bahead = "! git br -v | grep -P '\\[ahead \\d+' | sed 's/^\\* //' | awk '{ print $1 }'"
	ffAll = "! git isclean && git fetch --all && git bbehind | grep  -oh '[^ ]*$' | xargs -I % sh -c \"git checkout --force '%' && git merge --ff-only\"" && git co develop --force

	# track all remote branches
	trackAll = ! git branch -r | grep  -oh '\\(release/.*\\|support/.*\\|feature/.*\\|develop\\|master\\)$' | xargs -I branchName git branch --track branchName origin/branchName


	# show diffeneces between branch and origin/branch
	udiff = diff @{u}

	# comment only: "git rev-list support/12.0 --not develop --oneline" shows all commits in support/12.0 and not in develop
	branchdiff = ! \
		echo \"******** $1 --not $2\" && \
		git rev-list $1 --not $2 --oneline && \
		echo \"\" && \
		echo \"******** $2 --not $1\" && \
		git rev-list $2 --not $1 --oneline && \
		echo \"******** [end] git branchdiff\"

	# commits with a "fixup! ...." commit message from HEAD
	fixup=commit --fixup head

	# missing pushes to origin
	mp = "! echo mp depracted, please use [git st], now running for you... ; echo ''; git st "

	remergefile = checkout --conflict=diff3

	# SC=show commit
	sc = ! git difftool -d \"$1^\"
	dt = difftool 
	dtd = difftool -d 

	rl = reflog
	subget=submodule update --init --recursive
	deleteUnreachable = ! git reflog expire --expire-unreachable=now --all && git fsck --unreachable && git gc --prune=now && git fsck --unreachable

	uniqueCommits = ! git rev-list --oneline --no-merges --all --not $(git rev-list --all ^HEAD --pretty=format:%h | grep -v commit) | grep -v Buildserver

	alias = ! git config --get-regexp alias | grep -i 

	flowhelp = ! explorer https://github.com/petervanderdoes/gitflow-avh/wiki

	diffcommit = ! git difftool -d --tool=kdiff3 \"$1^\"

	mergedevelop = ! \
		git isClean && \
		git fetch --all && \
		git config devbranch.name $1 &&\
		git co $1 && \
		git merge && \
		git co develop && \
		git merge && \
		git merge -v --ff-only $1 && \
		git co $1 && \
		git merge -v --ff-only develop && \
		git co develop && \
		git branch -v --color --list develop

	mergepushdevelop = ! \
		git mergedevelop $1 && \
		git push origin develop $1 && \
		git branch -v --color --list develop

	md = "! \
		git isClean && \
		if [ \"$1\" = \"\" ]; then true; else git config devbranch.name $1; fi && \
		echo [git md] merge [M]evlop branch and [D]efault branch && \
		echo \"set default branch: e.g. [git config devbranch.name support/XX.X] actually it is set to =====> [$(git config --get devbranch.name)] <=====\" && \
		read -r -p 'Are you sure? [y/N] ' response && \
		if [ \"$response\" = \"y\" ]; then true; else false; fi && \
		git config --get devbranch.name && \
		git mergedevelop $(git config --get devbranch.name)"

	mpd = "! \
		git isClean && \
		if [ \"$1\" = \"\" ]; then true; else git config devbranch.name $1; fi && \
		echo [git mpd] [M]erge and [P]ush [D]evlop branch and default branch and push both branches && \
		echo \"set default branch: e.g. [git config devbranch.name support/XX.X] actually it is set to =====> [$(git config --get devbranch.name)] <=====\" && \
		read -r -p 'Are you sure? [y/N] ' response && \
		if [ \"$response\" = \"y\" ]; then true; else false; fi && \
		git config --get devbranch.name && \
		git mergepushdevelop $(git config --get devbranch.name)"

	# after merge conflict: use theirs, user ours
	ut = ! git checkout --theirs \"$1\" && git add \"$1\" && echo
	uo = ! git checkout --ours \"$1\" && git add \"$1\" && echo

	contains = "! \
		echo \"\" && \
		git branch -a --contains $1 && \
		git tag  --contains $1 && \
		git log --oneline -1 --format=format:\"%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)\" \
		"

	find = ! \
		echo \"Overview...\" && \
		git log --oneline --all | grep -i \"$1\" && \
		echo \"\nDetails...\" && \
		git log --oneline --all | \
			grep -i \"$1\"  | \
			awk  '{ print $1 }' | \
			xargs -L 1 git contains && \
		echo [finished git find]

	unreleasedCommits = !  git log `git describe --tags --abbrev=0`..HEAD --oneline && echo commits since `git describe --tags --abbrev=0`

	releases = ! git tag -l Thi* | xargs -L1 git contains

	showUnreachableCommits = ! git show --stat --oneline  $(git fsck --unreachable | git cat-file --batch-check | awk '/commit/ { print $3 }')
	applyCommitToWorkingDirectory = ! git diff $1~1 $1 | git apply - && echo [finished git applyCommitToWorkingDirectory]

	isClean = ! "git diff --stat --exit-code || ( echo -e \"\\e[31mRepository is NOT clean, use \\e[5mgit stash\\e[0m\\e[31m before, command aborted.\\e[0m\" && false )"

	deleteBranchBoth = "!f() { git push --delete $2 origin $1; git branch --delete $2 $1; }; f"
	
	# FEAT FEAT FEAT
	openfeat = "!f() { \
		git co -b feature/$1 && \
		git push --set-upstream origin feature/$1; \
		echo ''; \
		echo -e \"\\e[32mnext steps: [git closefeat] and [git finishfeat]\\e[0m\"; }; f"

	closefeat = "! \
		git isClean && \
		echo closefeat: rebase current branch to develop && \
		echo -e \"on merge conflict start \\e[32mgit finishclosefeat\\e[0m after solving all conflicts\" && \
		read -r -p 'Are you sure? [y/N] ' response && \
		if [ \"$response\" = \"y\" ]; then true; else false; fi && \
		git co -b tempForRebaseOnly && \
		git rebase -i develop && \
		git finishclosefeat"

	finishclosefeat = ! git co develop && git merge --ff-only tempForRebaseOnly && git br -d tempForRebaseOnly

	finishfeat = "!f() { git deleteBranchBoth $1 -f; }; f"

	# FEAT FEAT FEAT


	lc = log ORIG_HEAD.. --stat --no-merges
	lp = log --patch-with-stat
	mt = mergetool
	serve = !git daemon --reuseaddr --verbose  --base-path=. --export-all ./.git
	stm = status --untracked=no
	stfu = status --untracked=no
	
	gg = ! git fetch --tags --prune && git st

	generatesAliases  = ! git alias | sed 's/^\\(alias.\\([^ \\t]*\\).*\\|\\(\\).*\\)$/gg\\2=git \\2/g'

	templateFunction = "!f() { git l; }; f"

	parent = "!git show-branch | grep '*' | grep -v \"$(git rev-parse --abbrev-ref HEAD)\" | head -n1 | sed 's/.*\\[\\(.*\\)\\].*/\\1/' | sed 's/[\\^~].*//' #"

	storeDevCorrespondingSupportBranch = "! \
		git config devbranch.name $(git br | awk '{split($0,a,\"/\"); print a[2] $0}'  | sort --general-numeric-sort -r | head -n1 |  awk '{print $2}') && \
		git symbolic-ref build refs/heads/$(git config --get devbranch.name)"
	
	build-symbolic-ref = ! cat $(git rev-parse --show-toplevel)/.git/build

	# AddGitExclude
	age = "!f() { for var in \"$@\"; do echo \"$var\" >> .git/info/exclude; done; git st; }; f"
	# AddGitIgnore
	agi = "!f() { echo '' >> .gitignore; for var in \"$@\"; do echo \"$var\" >> .gitignore; done; git st; }; f"


	theirs = "!f() { git checkout --theirs $@; git add $@; }; f"
	ours = "!f() { git checkout --ours $@; git add $@; }; f"
	